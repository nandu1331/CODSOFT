# Movie Recommendation System

This repository contains a simple movie recommendation system implemented in Python using pandas and scikit-learn. The system recommends movies based on genre similarity using TF-IDF vectorization and cosine similarity.

## Features

- Recommends movies based on genre similarity.
- Uses TF-IDF vectorization to convert genre information into numerical form.
- Calculates cosine similarity to find similar movies.

## Technologies Used

- Python: The programming language used for the recommendation system.
- pandas: For data manipulation and analysis.
- scikit-learn: For TF-IDF vectorization and cosine similarity calculation.

## How It Works

The recommendation system uses a dataset of movies with their corresponding genres. It converts the genre information into numerical form using TF-IDF vectorization and calculates the cosine similarity between movies based on their genres. The system then recommends movies that are most similar to a given movie.

## Installation

1. **Clone the repository:**

```bash
git clone https://github.com/your-username/movie-recommendation-system.git
```

2. **Navigate to the project directory:**

```bash
cd movie-recommendation-system
```

3. **Install the required dependencies:**

```bash
pip install pandas scikit-learn
```

## Usage

1. **Create a movie dataset:**

Replace the sample movie dataset with your own data. The dataset should be a list of dictionaries with `Title` and `Genre` keys.

```python
movies_data = [
    {"Title": "Iron Man", "Genre": ["Action", "Adventure"]},
    {"Title": "Captain America", "Genre": ["Comedy", "Romance"]},
    {"Title": "Transformer", "Genre": ["Action", "Sci-Fi"]},
    {"Title": "Movie 4", "Genre": ["Drama"]},
    {"Title": "Sholay", "Genre": ["Comedy", "Adventure"]},
]
```

2. **Create a DataFrame from the dataset:**

```python
movies_df = pd.DataFrame(movies_data)
```

3. **Create a TF-IDF vectorizer and calculate the cosine similarity:**

```python
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(movies_df['Genre'].apply(lambda x: ' '.join(x)))
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
```

4. **Define the function to get movie recommendations:**

```python
def get_recommendations(title, cosine_sim=cosine_sim):
    idx = movies_df.index[movies_df['Title'] == title].tolist()[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]  # Exclude the movie itself (top similarity score)
    movie_indices = [i[0] for i in sim_scores]
    return movies_df[['Title', 'Genre']].iloc[movie_indices]
```

5. **Get recommendations for a given movie:**

Replace `movie_title` with the title of the movie you want to find recommendations for.

```python
movie_title = 'Movie 4'  # Replace with the movie you want to find recommendations for

recommendations = get_recommendations(movie_title)

print(f"Top 10 movie recommendations for '{movie_title}':")
print(recommendations)
```

## Example Output

```
Top 10 movie recommendations for 'Movie 4':
        Title              Genre
0     Iron Man  [Action, Adventure]
2  Transformer       [Action, Sci-Fi]
4       Sholay  [Comedy, Adventure]
1 Captain America [Comedy, Romance]
```

## Contributing

Contributions are welcome! If you have suggestions for improvements or new features, please fork the repository and submit a pull request.


